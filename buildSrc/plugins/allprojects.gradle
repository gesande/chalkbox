import net.sf.chalkbox.build.EnvironmentVariablesPlugin
import net.sf.chalkbox.build.ExportAntBuildFileTask
import net.sf.chalkbox.build.SvnPlugin

import org.gradle.api.Task
import org.gradle.api.tasks.GradleBuild


apply from: "$buildPlugins/java-development.gradle"
apply from: "$buildPlugins/repositories.gradle"
apply from: "$buildPlugins/reporting.gradle"
apply from: "$buildPlugins/distribution-package.gradle"

apply plugin : EnvironmentVariablesPlugin

apply from: "$buildPlugins/eclipseSettings.gradle"

apply plugin : SvnPlugin

task continousBuild(type: GradleBuild) { Task task ->
    group = 'Verification'
    description ='Continous build for the whole thing. Works also as a license to commit build target.'
    buildFile = 'build.gradle'
    tasks << 'clean'
    tasks << 'refreshBuildFileGenerator'
    tasks << 'exportAntBuildFile'
    tasks << 'chalkbox:continous'
    tasks << 'chalkbox:dist'
    tasks << 'example:dist'
    tasks << 'aggregateTestReport'
    tasks << 'aggregateJDependReport'
    tasks << 'aggregateEmmaReport'
    tasks << 'aggregateFindbugsReport'

    doLast { println "Continous build passed, good work!" }
}

task distributionPackage(type: GradleBuild, dependsOn: ['continousBuild']) { Task task ->
    group = 'Distribution'
    description = 'Distribution package for the whole thing including continous build.'
    buildFile = 'build.gradle'

    tasks << 'chalkbox:release'
    tasks << 'example:release'
    tasks << 'archiveAggregateReports'
    tasks << 'makeDistributionPackage'

    doLast { println "Distribution package ready to be uploaded to the repository." }
}

task exportAntBuildFile(type: ExportAntBuildFileTask)  { ExportAntBuildFileTask task ->
    group = 'Build'
    description = 'Creates a ant build file for the project which contains the most important targets.'
    parent = "buildSrc"
    buildFilename= "chalkbox.xml"
    defaultTarget= "continousBuild"
    targets = [
        "distributionPackage",
        "eclipseSettings",
        "exportAntBuildFile",
        "refreshBuildFileGenerator"
    ]
}

task buildBuildFileGenerator(type: GradleBuild) { GradleBuild task ->
    group = 'Build'
    description = 'Runs continous and release to buildfile-generator module.'

    tasks << 'buildfile-generator:continous'
    tasks << 'buildfile-generator:release'
}

task refreshBuildFileGenerator(dependsOn: ['buildBuildFileGenerator']) { Task task ->
    group = 'Build'
    description = 'Builds jar and sources-jar for buildfile-generator and copies the files to buildSrc lib/lib-sources directory.'
    doLast {
        def artifact = "buildfile-generator-1.0.0"
        def libs= file('buildfile-generator/build/libs')
        def lib = file('buildSrc/lib')
        def libSources = file('buildSrc/lib-sources')
        copy {
            from "${libs}/${artifact}.jar"
            into lib
        }
        copy {
            from "${libs}/${artifact}-sources.jar"
            into libSources
        }
    }
}