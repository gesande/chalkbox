import net.sf.chalkbox.build.EclipseClasspathPlugin
import net.sf.chalkbox.build.FindbugsWithHtmlReports
import net.sf.chalkbox.build.ForkEclipseJdtPlugin
import net.sf.chalkbox.build.ForkPmdSettings
import net.sf.chalkbox.build.JavaProjectArtifactPlugin
import net.sf.chalkbox.build.ProjectVersion

import org.gradle.logging.StyledTextOutputFactory
import org.gradle.logging.StyledTextOutput.Style



apply plugin : JavaProjectArtifactPlugin
apply plugin : FindbugsWithHtmlReports

apply plugin : ForkPmdSettings

apply plugin: "jdepend"

[jdependMain, jdependTest]*.reports {
    xml.enabled true
    text.enabled false
}

project.jdependMain.doLast {
    File file = new File(project.jdepend.reportsDir, "main.xml");
    assert file.exists() && file.isFile(), "File '$file' must exist"
    def numberOfCycles = new XmlSlurper().parse(file).Cycles.Package.size()
    def outputFactory = services.get(StyledTextOutputFactory).create("jdependMain.doLast")
    if (numberOfCycles > 0) {
        outputFactory.withStyle(Style.Error).println("We have detected $numberOfCycles cycles. Checkout report file: $file.")
        assert numberOfCycles == 0, """We have detected $numberOfCycles cycles. Checkout report file: $file."""
    }
    else {
        outputFactory.withStyle(Style.Info).println("No cycles detected for project '$project.name' . Good work!")
    }
}

project.jdependTest.doLast {
    File file = new File(project.jdepend.reportsDir, "test.xml");
    assert file.exists() && file.isFile(), "File '$file' must exist"
    def numberOfCycles = new XmlSlurper().parse(file).Cycles.Package.size()
    def outputFactory = services.get(StyledTextOutputFactory).create("jdependTest.doLast")
    if (numberOfCycles > 0) {
        outputFactory.withStyle(Style.Error).println("We have detected $numberOfCycles cycles. Checkout report file: $file.")
        //assert numberOfCycles == 0, """We have detected $numberOfCycles cycles. Checkout report file: $file."""
    }
    else {
        outputFactory.withStyle(Style.Info).println("No cycles detected for project '$project.name' . Good work!")
    }
}

task testCodeAnalysis(dependsOn: [
    findbugsTest,
    pmdTest,
    jdependTest
]) {
    group = 'Verification'
    description = 'Analyze test code with pmd/findbugs/jdepend'
    doLast {
        def outputFactory = services.get(StyledTextOutputFactory).create("testCodeAnalysis")
        outputFactory.withStyle(Style.Info).println("Test code analyzed for $project ")
    }
}

task mainCodeAnalysis(dependsOn: [
    findbugsMain,
    pmdMain,
    jdependMain
]) {
    group = 'Verification'
    description = 'Analyze main code with pmd/findbugs/jdepend'
    doLast {
        def outputFactory = services.get(StyledTextOutputFactory).create("mainCodeAnalysis")
        outputFactory.withStyle(Style.Info).println("Main code analyzed for $project ")
    }
}

task continous(dependsOn: [
    test,
    findbugsMain,
    pmdMain,
    jdependMain
]) {
    group = 'Verification'
    description = 'Continous build task including junit tests/pmd/findbugs/jdepend'
    doLast {
        def outputFactory = services.get(StyledTextOutputFactory).create("continous")
        outputFactory.withStyle(Style.Info).println("Continous build for $project passed. Good work!")
    }
}

apply plugin: ForkEclipseJdtPlugin
forkJdt { jdtInputFile = "${project.properties.buildTemplates}/for/eclipse/org.eclipse.jdt.core.prefs" }

apply plugin: EclipseClasspathPlugin
apply plugin: ProjectVersion
